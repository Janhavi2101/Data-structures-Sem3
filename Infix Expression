
#include <stdio.h>
#include <stdlib.h>
#define MAX 20

char stack[20];
int top = -1;

 int isEmpty()
 {   if(top==-1){
    return 1;
 }
}
char peek()
{
    return stack[top];
}

char pop()
{
    if(isEmpty()!=1){
    char ch = stack[top];
    top--;
    return (ch);
    }
}

void push(char oper)
{
    if (top==MAX-1)
        printf("Stack Full!!!!");

    else
    {
        top++;
        stack[top] = oper;
    }
}

int checkIfOperand(char ch)
{
    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');
}

int precedence(char ch)
{
    switch (ch)
    {
    case '+':
    case '-':
        return 1;

    case '*':
    case '/':
        return 2;

    case '^':
        return 3;
    }
    return -1;
}

int covertInfixToPostfix(char *expression)
{
    int i, j;

    for (i = 0, j = -1; expression[i]; ++i)
    {
        if (checkIfOperand(expression[i]))
            expression[++j] = expression[i];

        else if (expression[i] == '(')
            push(expression[i]);

        else if (expression[i] == ')')
        {
            while (isEmpty()!=1 && peek() != ')')
                expression[++j] = pop();
            if (isEmpty()!=1 && peek() != '(')
                return -1;
            else
                pop();
        }
        else
        {
            while (isEmpty()!=1 && precedence(expression[i]) <= precedence(peek()))
                expression[++j] = pop();
            push(expression[i]);
        }
    }

    while (isEmpty()!=1)
        expression[++j] = pop();

    expression[++j] = '\0';
    printf("%s", expression);
    return 0;
}

int main()
{
    char infix[MAX];
    printf("Name: Janhavi Gangawane\nBatch: S12\nRoll no: 28\n");
    printf("Enter the Infix Expression:\n");
    fgets(infix,MAX,stdin);
    covertInfixToPostfix(infix);
    return 0;
}
